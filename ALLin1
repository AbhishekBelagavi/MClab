MC LAB PROGRAMS
//1) AREA MULTIPLY ,CODE, READONLY

ENTRY
START
	LDR R0,= 2_0000000000001000
	LDR R1,= 2_0000000000001000
	MUL R2 , R1 ,R0
STOP B STOP 
END

//2)  	FACTORIAL
	AREA FACT , CODE , READONLY
ENTRY
START
	MOV R0,#4
	MOV R1,R0
LOOP SUB R1,R1,#1
	MUL R0,R1,R0
	CMP R1,#1
	BNE LOOP
STOP B STOP
END






3) Array
	AREA ARRAY,CODE,READONLY
ENTRY
START
	LDR R0,=VALUES
	MOV R1,#0
	MOV R2,#4
LOOP LDRH R3, [R0],#2
	ADD R1,R1,R3
	SUBS R2,R2,#1
	CMP R2,#0
	BNE LOOP 
	LDR R4,=RESULT
	STR R1,[R4]
STOP B STOP


VALUES DCW 0X11,0X22,0X33,0X44
	AREA DATA1,DATA,READWRITE
RESULT DCD 0X0
	END
4)Acsending
	AREA BUBBLE,CODE,READONLY
ENTRY
START
	MOV R0,#4
	LDR R1,=CVALUE
	LDR R2,=DVALUE
LOOP LDR R3,[R1],#4
	STR R3,[R2],#4
	SUBS R0,R0,#1
	CMP R0,#0
	BNE LOOP
	MOV R4,#3
OUTLOOP	MOV R5,#3
	LDR R6,=DVALUE
INLOOP LDR R7,[R6],#4
	LDR R8,[R6]
	CMP R7,R8
	BLT SKIP
	STR R7,[R6],#-4
	STR R8,[R6]
	ADD R6,#4
SKIP SUBS R5,R5,#1
	CMP R5,#0
	BNE INLOOP
	SUBS R4,R4,#1
	CMP R4,#0
	BNE OUTLOOP
STOP B STOP

CVALUE DCD 0X44444444
	   DCD 0X11111111
	   DCD 0X33333333
	   DCD 0X22222222
	   AREA DATA1,DATA,READWRITE
DVALUE DCD 0X000000000
	   END
	   	5)COUNT
	AREA DATA, CODE ,READONLY
ENTRY
START
	MOV R0,#0
	MOV R1,#0
	MOV R2,#2
	LDR R3,=VALUES
LOOP1	MOV R4,#32
		LDR R5,[R3],#4
LOOP	MOVS R5,R5,ROR #1
		BHI ONES
ZEROS	ADD R1,R1,#1
		B SKIP
ONES	ADD	R0,R0,#1
SKIP	SUBS R4,R4,#1
		BNE LOOP
		SUBS R2,R2,#1
		CMP R2,#0
		BNE LOOP1
STOP B STOP


VALUES	DCD	0X00000003
		DCD	0X00000002
		END
	    


6)Largest
	AREA LARGE,CODE,READONLY
ENTRY
START
	LDR R0,=ARRAY
	MOV R1,#6
	LDR R2,[R0],#4
LOOP1 LDR R3,[R0],#4
	  CMP R2,R3
	  BGE LOOP2
	  MOV R2,R3
LOOP2 SUB R1,R1,#1
	  CMP R1,#1
	  BNE LOOP1
	  LDR R4,=LARGEST
	  STR R2,[R4]
STOP B STOP



ARRAY DCD 0X05,0X04,0X03,0X02,0X01,0X09
	  AREA DATA1,DATA,READWRITE
LARGEST DCD 0X00
	  END





7) square
	AREA SQUARE, CODE, READONLY
ENTRY
START
	LDR R0,=TABLE
	MOV R1,#9
	MOV R1,R1,LSL #0X2
	ADD R0,R0,R1
	LDR R2,[R0]
STOP B STOP


TABLE DCD 0X00000000
	DCD 0X00000001
	DCD 0X00000004
	DCD 0X00000009
	DCD 0X00000010
	DCD 0X00000019
	DCD 0X00000024
	DCD 0X00000031
	DCD 0X00000040
	DCD 0X00000051
	DCD 0X00000064
END

8)sum to 10
	AREA SUM, CODE,READONLY
ENTRY
START
	MOV R0, #0
	MOV R1 ,#1
	MOV R2 ,#10
LOOP ADD R0,R0,R1
	ADD R1,R1,#1
	SUB R2,R2,#1
	CMP R2,#0
	BNE LOOP
STOP B STOP
END
PART B
1)	Program to test Working of DC Motor ///////// Date: 21/01/2012 

#include<lpc214x.h>

void clock_wise(void);
void anti_clock_wise(void);
unsigned int j=0;

int main()
{
	IO0DIR= 0X00000900;
	IO0SET= 0X00000100; 			//P0.8 should always high.

  	while(1)
  	{
    	clock_wise();
    	for(j=0;j<400000;j++); 		//delay
    	anti_clock_wise();
    	for(j=0;j<400000;j++); 		//delay
	  } 								//End of while(1)
}									//End of Main

void clock_wise(void)
{
	IO0CLR = 0x00000900; 			//stop motor and also turn off relay
  for(j=0;j<10000;j++); 			//small delay to allow motor to turn off 
  IO0SET = 0X00000900;			//Selecting the P0.11 line for clockwise and turn on motor
}

void anti_clock_wise(void)
{
	IO0CLR = 0X00000900;			//stop motor and also turn off relay
  for(j=0;j<10000;j++); 			//small delay to allow motor to turn off 
  IO0SET = 0X00000100;			//not selecting the P0.11 line for Anti clockwise
}

2)	TRIANGLE
#include <LPC21xx.h>

int main ()
{
	unsigned long int temp=0x00000000; 
  	unsigned int i=0;

  	IO0DIR=0x00FF0000;
   
    while(1)
    {
    	// output 0 to FE 
        for(i=0;i!=0xFF;i++)
        {
        	temp=i;
          	temp = temp << 16;
          	IO0PIN=temp;
        }
       	
		// output FF to 1   
        for(i=0xFF; i!=0;i--)
        {
        	temp=i;
          	temp = temp << 16;
          	IO0PIN=temp;
        }
	}//End of while(1)
}//End of main()

2B// program to generate square wave with DAC interface

#include <lpc21xx.h>
unsigned int var;
void delay(void);

int main ()
{
	PINSEL0 = 0x00000000 ;						// Configure P0.0 to P0.15 as GPIO
	PINSEL1 = 0x00000000 ;						// Configure P0.16 to P0.31 as GPIO
	IO0DIR  = 0x00FF0000 ;
   
	while(1)
    {
    	IO0PIN = 0x00000000;
			var= 0x00000000;
      delay();
      IO0PIN = 0x00FF0000;
			var= 0x00FF0000;
      delay();
    }
}   

void delay(void)
{
	unsigned int i=0;
  for(i=0;i<=95000;i++);
}

3)	LED
#include <LPC21xx.h>

unsigned int delay;

int main ()
{
	PINSEL1 = 0x00000000 ;		// Configure P0.16 to P0.31 as GPIO
    IO0DIR  = 0x00FF0000 ;		// Configure P0.16 to P0.23 as Output
	
	while(1)
	{
		IO0CLR = 0x00FF0000;					// CLEAR (0) P0.10 to P0.13 and P0.18 to P0.21, LEDs ON
		for(delay=0; delay<500000; delay++);	// delay
		IO0SET = 0x00FF0000;					// SET (1) P0.10 to P0.13 and P0.18 to P0.21, LEDs OFF
		for(delay=0; delay<500000; delay++);	// delay
	}

}

*4) Stepper motor Direction control
 #include <LPC21xx.H>

 void clock_wise(void);
 void anti_clock_wise(void);
 
 unsigned long int var1,var2;
 unsigned int i=0,j=0,k=0;

 int main(void)
 {
	PINSEL0 = 0x00FFFFFF;		//P0.12 to P0.15 GPIo
	IO0DIR |= 0x0000F000;		//P0.12 to P0.15 output

	while(1)
	{
		for(j=0;j<50;j++)  // 20 times in Clock wise
Rotation
			clock_wise();
		
		for(k=0;k<65000;k++);   // Delay to show  anti_clock Rotation 
		
		for(j=0;j<50;j++)       // 20 times in  Anti Clock wise Rotation
			anti_clock_wise();

		for(k=0;k<65000;k++);   // Delay to show clock Rotation 

	} 							// End of while(1)

 } 								// End of main

 void clock_wise(void)
 {
	var1 = 0x00000800;         	//For Clockwise
    for(i=0;i<=3;i++)         	// for A B C D Stepping
	{
		var1 = var1<<1;        	//For Clockwise
        var2 = ~var1;
        var2 = var2 & 0x0000F000;

		IO0PIN = ~var2;
		
        for(k=0;k<3000;k++); 	//for step speed variation         
      }

 }

 void anti_clock_wise(void)
 {
	var1 = 0x00010000;      	//For Anticlockwise
     for(i=0;i<=3;i++)      	// for A B C D Stepping
      {
        var1 = var1>>1;     	//For Anticlockwise
        var2 = ~var1;
        var2 = var2 & 0x0000F000;

		IO0PIN = ~var2;
        for(k=0;k<3000;k++); 	//for step speed variation 
             
      }
 }

5)7 segment display 
#include <LPC21xx.h>
unsigned int delay, count=0, Switchcount=0;
unsigned int Disp[16]={
0x003F0000, 0x00060000, 0x005B0000, 0x004F0000, 0x00660000,0x006D0000,
					   0x007D0000, 0x00070000, 0x007F0000, 0x006F0000, 0x00770000,0x007C0000,
					   0x00390000, 0x005E0000, 0x00790000, 0x00710000 };


int main (void)
{
	PINSEL1 = 0x00000000;
	IO0DIR  = 0xF0FF0000;
	
	while(1)
		{
			//Display values on Seven Segment
			IO0SET = 0x1000000;
			IO0CLR  = 0x00FF000;
		
			for(delay=0;delay<100;delay++)	
				IO0SET = Disp[Switchcount];	  		
			for(delay=0;delay<1000000;delay++)
				{}
	
			Switchcount++;
			if(Switchcount == 16)	  			
				{
					Switchcount = 0;
				}	
		}
}
	
